
LAB3_MAESTRO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000988  00000a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800124  00800124  00000a40  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c26  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a6  00000000  00000000  000017a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000630  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002678  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dc  00000000  00000000  000027e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000312  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002fd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  9e:	0c 94 c2 04 	jmp	0x984	; 0x984 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
	}
}

void setup()
{
	cli();
  a6:	f8 94       	cli
	initUART();
  a8:	0e 94 85 01 	call	0x30a	; 0x30a <initUART>
	spi_master_init();
  ac:	0e 94 76 01 	call	0x2ec	; 0x2ec <spi_master_init>

	//Desactivar I2C para liberar PC4 y PC5
	TWCR &= ~(1 << TWEN);
  b0:	ec eb       	ldi	r30, 0xBC	; 188
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8b 7f       	andi	r24, 0xFB	; 251
  b8:	80 83       	st	Z, r24

	//SS como salida
	DDRB |= (1 << PB2);
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB2);
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	85 b9       	out	0x05, r24	; 5

	//LEDs: PD3, PD2, PC0-PC5
	DDRD |= (1 << PD3) | (1 << PD2);
  c6:	8a b1       	in	r24, 0x0a	; 10
  c8:	8c 60       	ori	r24, 0x0C	; 12
  ca:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0b00111111;
  cc:	87 b1       	in	r24, 0x07	; 7
  ce:	8f 63       	ori	r24, 0x3F	; 63
  d0:	87 b9       	out	0x07, r24	; 7

	sei();
  d2:	78 94       	sei
  d4:	08 95       	ret

000000d6 <uart_send_values>:
}

void uart_send_values(uint16_t val1, uint16_t val2)
{
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	e2 97       	sbiw	r28, 0x32	; 50
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
	char buffer[50];
	sprintf(buffer, "Pot1: %u\t Pot2: %u\r\n", val1, val2);
  ee:	7f 93       	push	r23
  f0:	6f 93       	push	r22
  f2:	9f 93       	push	r25
  f4:	8f 93       	push	r24
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	9f 93       	push	r25
  fc:	8f 93       	push	r24
  fe:	8e 01       	movw	r16, r28
 100:	0f 5f       	subi	r16, 0xFF	; 255
 102:	1f 4f       	sbci	r17, 0xFF	; 255
 104:	1f 93       	push	r17
 106:	0f 93       	push	r16
 108:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <sprintf>
	UART_sendString(buffer);
 10c:	c8 01       	movw	r24, r16
 10e:	0e 94 a5 01 	call	0x34a	; 0x34a <UART_sendString>
}
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	e2 96       	adiw	r28, 0x32	; 50
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	0f 91       	pop	r16
 130:	08 95       	ret

00000132 <esperar_a_esclavo_listo>:

void esperar_a_esclavo_listo(void)
{
	uint8_t respuesta = 0;
	do {
		PORTB &= ~(1 << PB2);
 132:	85 b1       	in	r24, 0x05	; 5
 134:	8b 7f       	andi	r24, 0xFB	; 251
 136:	85 b9       	out	0x05, r24	; 5
		respuesta = spi_master_transmit(0xAA);
 138:	8a ea       	ldi	r24, 0xAA	; 170
 13a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_master_transmit>
		PORTB |= (1 << PB2);
 13e:	95 b1       	in	r25, 0x05	; 5
 140:	94 60       	ori	r25, 0x04	; 4
 142:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	ef e3       	ldi	r30, 0x3F	; 63
 146:	fc e9       	ldi	r31, 0x9C	; 156
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <esperar_a_esclavo_listo+0x16>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <esperar_a_esclavo_listo+0x1c>
 14e:	00 00       	nop
		_delay_ms(10);
	} while (respuesta != 0x55);
 150:	85 35       	cpi	r24, 0x55	; 85
 152:	79 f7       	brne	.-34     	; 0x132 <esperar_a_esclavo_listo>
}
 154:	08 95       	ret

00000156 <mostrar_en_leds>:

void mostrar_en_leds(uint8_t valor)
{
	//LED[7:0] = {PD3, PD2, PC5–PC0}
	PORTC = (PORTC & 0b11000000) | (valor & 0b00111111);
 156:	98 b1       	in	r25, 0x08	; 8
 158:	38 2f       	mov	r19, r24
 15a:	90 7c       	andi	r25, 0xC0	; 192
 15c:	28 2f       	mov	r18, r24
 15e:	2f 73       	andi	r18, 0x3F	; 63
 160:	92 2b       	or	r25, r18
 162:	98 b9       	out	0x08, r25	; 8

	if (valor & (1 << 6))
 164:	86 ff       	sbrs	r24, 6
 166:	04 c0       	rjmp	.+8      	; 0x170 <mostrar_en_leds+0x1a>
	PORTD |= (1 << PD2);
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	84 60       	ori	r24, 0x04	; 4
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	03 c0       	rjmp	.+6      	; 0x176 <mostrar_en_leds+0x20>
	else
	PORTD &= ~(1 << PD2);
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	8b 7f       	andi	r24, 0xFB	; 251
 174:	8b b9       	out	0x0b, r24	; 11

	if (valor & (1 << 7))
 176:	33 23       	and	r19, r19
 178:	24 f4       	brge	.+8      	; 0x182 <mostrar_en_leds+0x2c>
	PORTD |= (1 << PD3);
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	88 60       	ori	r24, 0x08	; 8
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	08 95       	ret
	else
	PORTD &= ~(1 << PD3);
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	87 7f       	andi	r24, 0xF7	; 247
 186:	8b b9       	out	0x0b, r24	; 11
 188:	08 95       	ret

0000018a <main>:

volatile uint8_t nuevo_dato_uart = 0;
volatile uint8_t valor_uart = 0;

int main(void)
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	6e 97       	sbiw	r28, 0x1e	; 30
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
	setup();
 19e:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	uint8_t high1, low1, high2, low2;
	uint16_t val1, val2;

	while (1)
	{
		esperar_a_esclavo_listo();					//Maestro envía 0xAA, espera 0x55
 1a2:	0e 94 99 00 	call	0x132	; 0x132 <esperar_a_esclavo_listo>
		PORTB &= ~(1 << PB2);						//SS LOW: activa esclavo
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	8b 7f       	andi	r24, 0xFB	; 251
 1aa:	85 b9       	out	0x05, r24	; 5
		high1 = spi_master_transmit(0x00);			//Lee val1 (parte alta)
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_master_transmit>
 1b2:	08 2f       	mov	r16, r24
		low1  = spi_master_transmit(0x00);			//Lee val1 (parte baja)
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_master_transmit>
 1ba:	f8 2e       	mov	r15, r24
		high2 = spi_master_transmit(0x00);			//val2 alta
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_master_transmit>
 1c2:	18 2f       	mov	r17, r24
		low2  = spi_master_transmit(0x00);			//val2 baja
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_master_transmit>
		PORTB |= (1 << PB2);						//SS HIGH: desactiva esclavo
 1ca:	95 b1       	in	r25, 0x05	; 5
 1cc:	94 60       	ori	r25, 0x04	; 4
 1ce:	95 b9       	out	0x05, r25	; 5

		val1 = (high1 << 8) | low1;
 1d0:	20 2f       	mov	r18, r16
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	32 2f       	mov	r19, r18
 1d6:	22 27       	eor	r18, r18
		val2 = (high2 << 8) | low2;
 1d8:	61 2f       	mov	r22, r17
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	76 2f       	mov	r23, r22
 1de:	66 27       	eor	r22, r22
 1e0:	68 2b       	or	r22, r24

		uart_send_values(val1, val2);
 1e2:	c9 01       	movw	r24, r18
 1e4:	8f 29       	or	r24, r15
 1e6:	0e 94 6b 00 	call	0xd6	; 0xd6 <uart_send_values>

		//Si llegó un nuevo valor por UART
		if (nuevo_dato_uart)
 1ea:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <nuevo_dato_uart>
 1ee:	88 23       	and	r24, r24
 1f0:	59 f1       	breq	.+86     	; 0x248 <main+0xbe>
		{
			nuevo_dato_uart = 0;
 1f2:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <nuevo_dato_uart>

			//Mostrar en LEDs
			mostrar_en_leds(valor_uart);
 1f6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 1fa:	0e 94 ab 00 	call	0x156	; 0x156 <mostrar_en_leds>

			//Confirmación
			char confirm[30];
			sprintf(confirm, "Recibido: %u\r\n", valor_uart);
 1fe:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 202:	1f 92       	push	r1
 204:	8f 93       	push	r24
 206:	85 e1       	ldi	r24, 0x15	; 21
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	9f 93       	push	r25
 20c:	8f 93       	push	r24
 20e:	8e 01       	movw	r16, r28
 210:	0f 5f       	subi	r16, 0xFF	; 255
 212:	1f 4f       	sbci	r17, 0xFF	; 255
 214:	1f 93       	push	r17
 216:	0f 93       	push	r16
 218:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <sprintf>
			UART_sendString(confirm);
 21c:	c8 01       	movw	r24, r16
 21e:	0e 94 a5 01 	call	0x34a	; 0x34a <UART_sendString>

			//Enviar al esclavo
			PORTB &= ~(1 << PB2);
 222:	85 b1       	in	r24, 0x05	; 5
 224:	8b 7f       	andi	r24, 0xFB	; 251
 226:	85 b9       	out	0x05, r24	; 5
			spi_master_transmit(0xCC);         //comando LED
 228:	8c ec       	ldi	r24, 0xCC	; 204
 22a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_master_transmit>
			spi_master_transmit(valor_uart);   //valor real
 22e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 232:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_master_transmit>
			PORTB |= (1 << PB2);
 236:	85 b1       	in	r24, 0x05	; 5
 238:	84 60       	ori	r24, 0x04	; 4
 23a:	85 b9       	out	0x05, r24	; 5
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	89 e6       	ldi	r24, 0x69	; 105
 24c:	98 e1       	ldi	r25, 0x18	; 24
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0xc4>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0xce>
 258:	00 00       	nop
 25a:	a3 cf       	rjmp	.-186    	; 0x1a2 <main+0x18>

0000025c <__vector_18>:
	PORTD &= ~(1 << PD3);
}

//Interrupción UART RX - recibe caracteres en forma de número (ej. "123\r")
ISR(USART_RX_vect)
{
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	2f 93       	push	r18
 268:	3f 93       	push	r19
 26a:	4f 93       	push	r20
 26c:	5f 93       	push	r21
 26e:	6f 93       	push	r22
 270:	7f 93       	push	r23
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	af 93       	push	r26
 278:	bf 93       	push	r27
 27a:	ef 93       	push	r30
 27c:	ff 93       	push	r31
	char c = UDR0;
 27e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (c == '\r') {
 282:	8d 30       	cpi	r24, 0x0D	; 13
 284:	a1 f4       	brne	.+40     	; 0x2ae <__vector_18+0x52>
		uart_buffer[uart_index] = '\0';
 286:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <uart_index>
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	e9 5d       	subi	r30, 0xD9	; 217
 28e:	fe 4f       	sbci	r31, 0xFE	; 254
 290:	10 82       	st	Z, r1
		valor_uart = atoi((char*)uart_buffer);  //Convertir a número
 292:	87 e2       	ldi	r24, 0x27	; 39
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 b2 01 	call	0x364	; 0x364 <atoi>
 29a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
		if (valor_uart <= 255) {
 29e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
			nuevo_dato_uart = 1;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <nuevo_dato_uart>
		}
		uart_index = 0;
 2a8:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <uart_index>
 2ac:	0e c0       	rjmp	.+28     	; 0x2ca <__vector_18+0x6e>
		} else if (uart_index < UART_BUFFER_SIZE - 1) {
 2ae:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <uart_index>
 2b2:	94 30       	cpi	r25, 0x04	; 4
 2b4:	50 f4       	brcc	.+20     	; 0x2ca <__vector_18+0x6e>
		uart_buffer[uart_index++] = c;
 2b6:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <uart_index>
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	9e 0f       	add	r25, r30
 2be:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <uart_index>
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	e9 5d       	subi	r30, 0xD9	; 217
 2c6:	fe 4f       	sbci	r31, 0xFE	; 254
 2c8:	80 83       	st	Z, r24
	}
}
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	bf 91       	pop	r27
 2d0:	af 91       	pop	r26
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	7f 91       	pop	r23
 2d8:	6f 91       	pop	r22
 2da:	5f 91       	pop	r21
 2dc:	4f 91       	pop	r20
 2de:	3f 91       	pop	r19
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <spi_master_init>:
//PB3 -> MOSI 
//PB4 -> MISO
//PB5 -> SCK
void spi_master_init(void) {
	//Configurar MOSI, SCK y SS como salida; MISO como entrada
	DDRB |= (1 << PB3) | (1 << PB5) | (1 << PB2);		//MOSI, SCK, SS
 2ec:	84 b1       	in	r24, 0x04	; 4
 2ee:	8c 62       	ori	r24, 0x2C	; 44
 2f0:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << PB4);								//MISO
 2f2:	84 b1       	in	r24, 0x04	; 4
 2f4:	8f 7e       	andi	r24, 0xEF	; 239
 2f6:	84 b9       	out	0x04, r24	; 4
	
	//Habilitar SPI en modo maestro, velocidad fosc/16
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 2f8:	81 e5       	ldi	r24, 0x51	; 81
 2fa:	8c bd       	out	0x2c, r24	; 44
 2fc:	08 95       	ret

000002fe <spi_master_transmit>:
}

uint8_t spi_master_transmit(uint8_t data) {
	SPDR = data;									//Cargar dato al registro de transmisión
 2fe:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));					//Esperar a que se complete
 300:	0d b4       	in	r0, 0x2d	; 45
 302:	07 fe       	sbrs	r0, 7
 304:	fd cf       	rjmp	.-6      	; 0x300 <spi_master_transmit+0x2>
	return SPDR;									//Devolver el byte recibido
 306:	8e b5       	in	r24, 0x2e	; 46
}
 308:	08 95       	ret

0000030a <initUART>:
#include "uart.h"

void initUART()
{
	//Configurar PD0 (RX) como entrada y PD1 (TX) como salida
	DDRD |= (1 << DDD1);			//TX
 30a:	8a b1       	in	r24, 0x0a	; 10
 30c:	82 60       	ori	r24, 0x02	; 2
 30e:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD0);			//RX
 310:	8a b1       	in	r24, 0x0a	; 10
 312:	8e 7f       	andi	r24, 0xFE	; 254
 314:	8a b9       	out	0x0a, r24	; 10

	//No usar doble velocidad
	UCSR0A = 0;
 316:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

	//Habilitar receptor, transmisor e interrupción de recepción
	UCSR0B |= (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
 31a:	e1 ec       	ldi	r30, 0xC1	; 193
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	88 69       	ori	r24, 0x98	; 152
 322:	80 83       	st	Z, r24

	//Configurar: 8 bits, sin paridad, 1 bit de parada
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 324:	e2 ec       	ldi	r30, 0xC2	; 194
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	86 60       	ori	r24, 0x06	; 6
 32c:	80 83       	st	Z, r24

	//UBRR0 = 103 para 9600 baudios a 16 MHz (sin U2X0)
	UBRR0 = 103;
 32e:	87 e6       	ldi	r24, 0x67	; 103
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 336:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 33a:	08 95       	ret

0000033c <UART_sendChar>:
}

void UART_sendChar(char c)
{
	while (!(UCSR0A & (1 << UDRE0)));		//Esperar buffer libre
 33c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 340:	95 ff       	sbrs	r25, 5
 342:	fc cf       	rjmp	.-8      	; 0x33c <UART_sendChar>
	UDR0 = c;
 344:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 348:	08 95       	ret

0000034a <UART_sendString>:
}

void UART_sendString(char *texto)
{
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	ec 01       	movw	r28, r24
	while (*texto)
 350:	03 c0       	rjmp	.+6      	; 0x358 <UART_sendString+0xe>
	{
		UART_sendChar(*texto++);
 352:	21 96       	adiw	r28, 0x01	; 1
 354:	0e 94 9e 01 	call	0x33c	; 0x33c <UART_sendChar>
	UDR0 = c;
}

void UART_sendString(char *texto)
{
	while (*texto)
 358:	88 81       	ld	r24, Y
 35a:	81 11       	cpse	r24, r1
 35c:	fa cf       	rjmp	.-12     	; 0x352 <UART_sendString+0x8>
	{
		UART_sendChar(*texto++);
	}
}
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <atoi>:
 364:	fc 01       	movw	r30, r24
 366:	88 27       	eor	r24, r24
 368:	99 27       	eor	r25, r25
 36a:	e8 94       	clt
 36c:	21 91       	ld	r18, Z+
 36e:	20 32       	cpi	r18, 0x20	; 32
 370:	e9 f3       	breq	.-6      	; 0x36c <atoi+0x8>
 372:	29 30       	cpi	r18, 0x09	; 9
 374:	10 f0       	brcs	.+4      	; 0x37a <atoi+0x16>
 376:	2e 30       	cpi	r18, 0x0E	; 14
 378:	c8 f3       	brcs	.-14     	; 0x36c <atoi+0x8>
 37a:	2b 32       	cpi	r18, 0x2B	; 43
 37c:	41 f0       	breq	.+16     	; 0x38e <atoi+0x2a>
 37e:	2d 32       	cpi	r18, 0x2D	; 45
 380:	39 f4       	brne	.+14     	; 0x390 <atoi+0x2c>
 382:	68 94       	set
 384:	04 c0       	rjmp	.+8      	; 0x38e <atoi+0x2a>
 386:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__mulhi_const_10>
 38a:	82 0f       	add	r24, r18
 38c:	91 1d       	adc	r25, r1
 38e:	21 91       	ld	r18, Z+
 390:	20 53       	subi	r18, 0x30	; 48
 392:	2a 30       	cpi	r18, 0x0A	; 10
 394:	c0 f3       	brcs	.-16     	; 0x386 <atoi+0x22>
 396:	1e f4       	brtc	.+6      	; 0x39e <atoi+0x3a>
 398:	90 95       	com	r25
 39a:	81 95       	neg	r24
 39c:	9f 4f       	sbci	r25, 0xFF	; 255
 39e:	08 95       	ret

000003a0 <__mulhi_const_10>:
 3a0:	7a e0       	ldi	r23, 0x0A	; 10
 3a2:	97 9f       	mul	r25, r23
 3a4:	90 2d       	mov	r25, r0
 3a6:	87 9f       	mul	r24, r23
 3a8:	80 2d       	mov	r24, r0
 3aa:	91 0d       	add	r25, r1
 3ac:	11 24       	eor	r1, r1
 3ae:	08 95       	ret

000003b0 <sprintf>:
 3b0:	ae e0       	ldi	r26, 0x0E	; 14
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	ee ed       	ldi	r30, 0xDE	; 222
 3b6:	f1 e0       	ldi	r31, 0x01	; 1
 3b8:	0c 94 99 04 	jmp	0x932	; 0x932 <__prologue_saves__+0x1c>
 3bc:	0d 89       	ldd	r16, Y+21	; 0x15
 3be:	1e 89       	ldd	r17, Y+22	; 0x16
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	8c 83       	std	Y+4, r24	; 0x04
 3c4:	1a 83       	std	Y+2, r17	; 0x02
 3c6:	09 83       	std	Y+1, r16	; 0x01
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	9f e7       	ldi	r25, 0x7F	; 127
 3cc:	9e 83       	std	Y+6, r25	; 0x06
 3ce:	8d 83       	std	Y+5, r24	; 0x05
 3d0:	ae 01       	movw	r20, r28
 3d2:	47 5e       	subi	r20, 0xE7	; 231
 3d4:	5f 4f       	sbci	r21, 0xFF	; 255
 3d6:	6f 89       	ldd	r22, Y+23	; 0x17
 3d8:	78 8d       	ldd	r23, Y+24	; 0x18
 3da:	ce 01       	movw	r24, r28
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <vfprintf>
 3e2:	ef 81       	ldd	r30, Y+7	; 0x07
 3e4:	f8 85       	ldd	r31, Y+8	; 0x08
 3e6:	e0 0f       	add	r30, r16
 3e8:	f1 1f       	adc	r31, r17
 3ea:	10 82       	st	Z, r1
 3ec:	2e 96       	adiw	r28, 0x0e	; 14
 3ee:	e4 e0       	ldi	r30, 0x04	; 4
 3f0:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__epilogue_restores__+0x1c>

000003f4 <vfprintf>:
 3f4:	ab e0       	ldi	r26, 0x0B	; 11
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	e0 e0       	ldi	r30, 0x00	; 0
 3fa:	f2 e0       	ldi	r31, 0x02	; 2
 3fc:	0c 94 8b 04 	jmp	0x916	; 0x916 <__prologue_saves__>
 400:	6c 01       	movw	r12, r24
 402:	7b 01       	movw	r14, r22
 404:	8a 01       	movw	r16, r20
 406:	fc 01       	movw	r30, r24
 408:	17 82       	std	Z+7, r1	; 0x07
 40a:	16 82       	std	Z+6, r1	; 0x06
 40c:	83 81       	ldd	r24, Z+3	; 0x03
 40e:	81 ff       	sbrs	r24, 1
 410:	cc c1       	rjmp	.+920    	; 0x7aa <__EEPROM_REGION_LENGTH__+0x3aa>
 412:	ce 01       	movw	r24, r28
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	3c 01       	movw	r6, r24
 418:	f6 01       	movw	r30, r12
 41a:	93 81       	ldd	r25, Z+3	; 0x03
 41c:	f7 01       	movw	r30, r14
 41e:	93 fd       	sbrc	r25, 3
 420:	85 91       	lpm	r24, Z+
 422:	93 ff       	sbrs	r25, 3
 424:	81 91       	ld	r24, Z+
 426:	7f 01       	movw	r14, r30
 428:	88 23       	and	r24, r24
 42a:	09 f4       	brne	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42c:	ba c1       	rjmp	.+884    	; 0x7a2 <__EEPROM_REGION_LENGTH__+0x3a2>
 42e:	85 32       	cpi	r24, 0x25	; 37
 430:	39 f4       	brne	.+14     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 432:	93 fd       	sbrc	r25, 3
 434:	85 91       	lpm	r24, Z+
 436:	93 ff       	sbrs	r25, 3
 438:	81 91       	ld	r24, Z+
 43a:	7f 01       	movw	r14, r30
 43c:	85 32       	cpi	r24, 0x25	; 37
 43e:	29 f4       	brne	.+10     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 440:	b6 01       	movw	r22, r12
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <fputc>
 448:	e7 cf       	rjmp	.-50     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 44a:	91 2c       	mov	r9, r1
 44c:	21 2c       	mov	r2, r1
 44e:	31 2c       	mov	r3, r1
 450:	ff e1       	ldi	r31, 0x1F	; 31
 452:	f3 15       	cp	r31, r3
 454:	d8 f0       	brcs	.+54     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 456:	8b 32       	cpi	r24, 0x2B	; 43
 458:	79 f0       	breq	.+30     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 45a:	38 f4       	brcc	.+14     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 45c:	80 32       	cpi	r24, 0x20	; 32
 45e:	79 f0       	breq	.+30     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 460:	83 32       	cpi	r24, 0x23	; 35
 462:	a1 f4       	brne	.+40     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 464:	23 2d       	mov	r18, r3
 466:	20 61       	ori	r18, 0x10	; 16
 468:	1d c0       	rjmp	.+58     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 46a:	8d 32       	cpi	r24, 0x2D	; 45
 46c:	61 f0       	breq	.+24     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 46e:	80 33       	cpi	r24, 0x30	; 48
 470:	69 f4       	brne	.+26     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 472:	23 2d       	mov	r18, r3
 474:	21 60       	ori	r18, 0x01	; 1
 476:	16 c0       	rjmp	.+44     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 478:	83 2d       	mov	r24, r3
 47a:	82 60       	ori	r24, 0x02	; 2
 47c:	38 2e       	mov	r3, r24
 47e:	e3 2d       	mov	r30, r3
 480:	e4 60       	ori	r30, 0x04	; 4
 482:	3e 2e       	mov	r3, r30
 484:	2a c0       	rjmp	.+84     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 486:	f3 2d       	mov	r31, r3
 488:	f8 60       	ori	r31, 0x08	; 8
 48a:	1d c0       	rjmp	.+58     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 48c:	37 fc       	sbrc	r3, 7
 48e:	2d c0       	rjmp	.+90     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 490:	20 ed       	ldi	r18, 0xD0	; 208
 492:	28 0f       	add	r18, r24
 494:	2a 30       	cpi	r18, 0x0A	; 10
 496:	40 f0       	brcs	.+16     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 498:	8e 32       	cpi	r24, 0x2E	; 46
 49a:	b9 f4       	brne	.+46     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 49c:	36 fc       	sbrc	r3, 6
 49e:	81 c1       	rjmp	.+770    	; 0x7a2 <__EEPROM_REGION_LENGTH__+0x3a2>
 4a0:	23 2d       	mov	r18, r3
 4a2:	20 64       	ori	r18, 0x40	; 64
 4a4:	32 2e       	mov	r3, r18
 4a6:	19 c0       	rjmp	.+50     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4a8:	36 fe       	sbrs	r3, 6
 4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4ac:	8a e0       	ldi	r24, 0x0A	; 10
 4ae:	98 9e       	mul	r9, r24
 4b0:	20 0d       	add	r18, r0
 4b2:	11 24       	eor	r1, r1
 4b4:	92 2e       	mov	r9, r18
 4b6:	11 c0       	rjmp	.+34     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4b8:	ea e0       	ldi	r30, 0x0A	; 10
 4ba:	2e 9e       	mul	r2, r30
 4bc:	20 0d       	add	r18, r0
 4be:	11 24       	eor	r1, r1
 4c0:	22 2e       	mov	r2, r18
 4c2:	f3 2d       	mov	r31, r3
 4c4:	f0 62       	ori	r31, 0x20	; 32
 4c6:	3f 2e       	mov	r3, r31
 4c8:	08 c0       	rjmp	.+16     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4ca:	8c 36       	cpi	r24, 0x6C	; 108
 4cc:	21 f4       	brne	.+8      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4ce:	83 2d       	mov	r24, r3
 4d0:	80 68       	ori	r24, 0x80	; 128
 4d2:	38 2e       	mov	r3, r24
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4d6:	88 36       	cpi	r24, 0x68	; 104
 4d8:	41 f4       	brne	.+16     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4da:	f7 01       	movw	r30, r14
 4dc:	93 fd       	sbrc	r25, 3
 4de:	85 91       	lpm	r24, Z+
 4e0:	93 ff       	sbrs	r25, 3
 4e2:	81 91       	ld	r24, Z+
 4e4:	7f 01       	movw	r14, r30
 4e6:	81 11       	cpse	r24, r1
 4e8:	b3 cf       	rjmp	.-154    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 4ea:	98 2f       	mov	r25, r24
 4ec:	9f 7d       	andi	r25, 0xDF	; 223
 4ee:	95 54       	subi	r25, 0x45	; 69
 4f0:	93 30       	cpi	r25, 0x03	; 3
 4f2:	28 f4       	brcc	.+10     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4f4:	0c 5f       	subi	r16, 0xFC	; 252
 4f6:	1f 4f       	sbci	r17, 0xFF	; 255
 4f8:	9f e3       	ldi	r25, 0x3F	; 63
 4fa:	99 83       	std	Y+1, r25	; 0x01
 4fc:	0d c0       	rjmp	.+26     	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 4fe:	83 36       	cpi	r24, 0x63	; 99
 500:	31 f0       	breq	.+12     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 502:	83 37       	cpi	r24, 0x73	; 115
 504:	71 f0       	breq	.+28     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 506:	83 35       	cpi	r24, 0x53	; 83
 508:	09 f0       	breq	.+2      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 50a:	59 c0       	rjmp	.+178    	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
 50c:	21 c0       	rjmp	.+66     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 50e:	f8 01       	movw	r30, r16
 510:	80 81       	ld	r24, Z
 512:	89 83       	std	Y+1, r24	; 0x01
 514:	0e 5f       	subi	r16, 0xFE	; 254
 516:	1f 4f       	sbci	r17, 0xFF	; 255
 518:	88 24       	eor	r8, r8
 51a:	83 94       	inc	r8
 51c:	91 2c       	mov	r9, r1
 51e:	53 01       	movw	r10, r6
 520:	13 c0       	rjmp	.+38     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 522:	28 01       	movw	r4, r16
 524:	f2 e0       	ldi	r31, 0x02	; 2
 526:	4f 0e       	add	r4, r31
 528:	51 1c       	adc	r5, r1
 52a:	f8 01       	movw	r30, r16
 52c:	a0 80       	ld	r10, Z
 52e:	b1 80       	ldd	r11, Z+1	; 0x01
 530:	36 fe       	sbrs	r3, 6
 532:	03 c0       	rjmp	.+6      	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 534:	69 2d       	mov	r22, r9
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
 53a:	6f ef       	ldi	r22, 0xFF	; 255
 53c:	7f ef       	ldi	r23, 0xFF	; 255
 53e:	c5 01       	movw	r24, r10
 540:	0e 94 e6 03 	call	0x7cc	; 0x7cc <strnlen>
 544:	4c 01       	movw	r8, r24
 546:	82 01       	movw	r16, r4
 548:	f3 2d       	mov	r31, r3
 54a:	ff 77       	andi	r31, 0x7F	; 127
 54c:	3f 2e       	mov	r3, r31
 54e:	16 c0       	rjmp	.+44     	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
 550:	28 01       	movw	r4, r16
 552:	22 e0       	ldi	r18, 0x02	; 2
 554:	42 0e       	add	r4, r18
 556:	51 1c       	adc	r5, r1
 558:	f8 01       	movw	r30, r16
 55a:	a0 80       	ld	r10, Z
 55c:	b1 80       	ldd	r11, Z+1	; 0x01
 55e:	36 fe       	sbrs	r3, 6
 560:	03 c0       	rjmp	.+6      	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 562:	69 2d       	mov	r22, r9
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
 568:	6f ef       	ldi	r22, 0xFF	; 255
 56a:	7f ef       	ldi	r23, 0xFF	; 255
 56c:	c5 01       	movw	r24, r10
 56e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <strnlen_P>
 572:	4c 01       	movw	r8, r24
 574:	f3 2d       	mov	r31, r3
 576:	f0 68       	ori	r31, 0x80	; 128
 578:	3f 2e       	mov	r3, r31
 57a:	82 01       	movw	r16, r4
 57c:	33 fc       	sbrc	r3, 3
 57e:	1b c0       	rjmp	.+54     	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 580:	82 2d       	mov	r24, r2
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	88 16       	cp	r8, r24
 586:	99 06       	cpc	r9, r25
 588:	b0 f4       	brcc	.+44     	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 58a:	b6 01       	movw	r22, r12
 58c:	80 e2       	ldi	r24, 0x20	; 32
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <fputc>
 594:	2a 94       	dec	r2
 596:	f4 cf       	rjmp	.-24     	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
 598:	f5 01       	movw	r30, r10
 59a:	37 fc       	sbrc	r3, 7
 59c:	85 91       	lpm	r24, Z+
 59e:	37 fe       	sbrs	r3, 7
 5a0:	81 91       	ld	r24, Z+
 5a2:	5f 01       	movw	r10, r30
 5a4:	b6 01       	movw	r22, r12
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <fputc>
 5ac:	21 10       	cpse	r2, r1
 5ae:	2a 94       	dec	r2
 5b0:	21 e0       	ldi	r18, 0x01	; 1
 5b2:	82 1a       	sub	r8, r18
 5b4:	91 08       	sbc	r9, r1
 5b6:	81 14       	cp	r8, r1
 5b8:	91 04       	cpc	r9, r1
 5ba:	71 f7       	brne	.-36     	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
 5bc:	e8 c0       	rjmp	.+464    	; 0x78e <__EEPROM_REGION_LENGTH__+0x38e>
 5be:	84 36       	cpi	r24, 0x64	; 100
 5c0:	11 f0       	breq	.+4      	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 5c2:	89 36       	cpi	r24, 0x69	; 105
 5c4:	41 f5       	brne	.+80     	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
 5c6:	f8 01       	movw	r30, r16
 5c8:	37 fe       	sbrs	r3, 7
 5ca:	07 c0       	rjmp	.+14     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
 5cc:	60 81       	ld	r22, Z
 5ce:	71 81       	ldd	r23, Z+1	; 0x01
 5d0:	82 81       	ldd	r24, Z+2	; 0x02
 5d2:	93 81       	ldd	r25, Z+3	; 0x03
 5d4:	0c 5f       	subi	r16, 0xFC	; 252
 5d6:	1f 4f       	sbci	r17, 0xFF	; 255
 5d8:	08 c0       	rjmp	.+16     	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
 5da:	60 81       	ld	r22, Z
 5dc:	71 81       	ldd	r23, Z+1	; 0x01
 5de:	07 2e       	mov	r0, r23
 5e0:	00 0c       	add	r0, r0
 5e2:	88 0b       	sbc	r24, r24
 5e4:	99 0b       	sbc	r25, r25
 5e6:	0e 5f       	subi	r16, 0xFE	; 254
 5e8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ea:	f3 2d       	mov	r31, r3
 5ec:	ff 76       	andi	r31, 0x6F	; 111
 5ee:	3f 2e       	mov	r3, r31
 5f0:	97 ff       	sbrs	r25, 7
 5f2:	09 c0       	rjmp	.+18     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
 5f4:	90 95       	com	r25
 5f6:	80 95       	com	r24
 5f8:	70 95       	com	r23
 5fa:	61 95       	neg	r22
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255
 5fe:	8f 4f       	sbci	r24, 0xFF	; 255
 600:	9f 4f       	sbci	r25, 0xFF	; 255
 602:	f0 68       	ori	r31, 0x80	; 128
 604:	3f 2e       	mov	r3, r31
 606:	2a e0       	ldi	r18, 0x0A	; 10
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	a3 01       	movw	r20, r6
 60c:	0e 94 2d 04 	call	0x85a	; 0x85a <__ultoa_invert>
 610:	88 2e       	mov	r8, r24
 612:	86 18       	sub	r8, r6
 614:	45 c0       	rjmp	.+138    	; 0x6a0 <__EEPROM_REGION_LENGTH__+0x2a0>
 616:	85 37       	cpi	r24, 0x75	; 117
 618:	31 f4       	brne	.+12     	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
 61a:	23 2d       	mov	r18, r3
 61c:	2f 7e       	andi	r18, 0xEF	; 239
 61e:	b2 2e       	mov	r11, r18
 620:	2a e0       	ldi	r18, 0x0A	; 10
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	25 c0       	rjmp	.+74     	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
 626:	93 2d       	mov	r25, r3
 628:	99 7f       	andi	r25, 0xF9	; 249
 62a:	b9 2e       	mov	r11, r25
 62c:	8f 36       	cpi	r24, 0x6F	; 111
 62e:	c1 f0       	breq	.+48     	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
 630:	18 f4       	brcc	.+6      	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
 632:	88 35       	cpi	r24, 0x58	; 88
 634:	79 f0       	breq	.+30     	; 0x654 <__EEPROM_REGION_LENGTH__+0x254>
 636:	b5 c0       	rjmp	.+362    	; 0x7a2 <__EEPROM_REGION_LENGTH__+0x3a2>
 638:	80 37       	cpi	r24, 0x70	; 112
 63a:	19 f0       	breq	.+6      	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
 63c:	88 37       	cpi	r24, 0x78	; 120
 63e:	21 f0       	breq	.+8      	; 0x648 <__EEPROM_REGION_LENGTH__+0x248>
 640:	b0 c0       	rjmp	.+352    	; 0x7a2 <__EEPROM_REGION_LENGTH__+0x3a2>
 642:	e9 2f       	mov	r30, r25
 644:	e0 61       	ori	r30, 0x10	; 16
 646:	be 2e       	mov	r11, r30
 648:	b4 fe       	sbrs	r11, 4
 64a:	0d c0       	rjmp	.+26     	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
 64c:	fb 2d       	mov	r31, r11
 64e:	f4 60       	ori	r31, 0x04	; 4
 650:	bf 2e       	mov	r11, r31
 652:	09 c0       	rjmp	.+18     	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
 654:	34 fe       	sbrs	r3, 4
 656:	0a c0       	rjmp	.+20     	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
 658:	29 2f       	mov	r18, r25
 65a:	26 60       	ori	r18, 0x06	; 6
 65c:	b2 2e       	mov	r11, r18
 65e:	06 c0       	rjmp	.+12     	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
 660:	28 e0       	ldi	r18, 0x08	; 8
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	05 c0       	rjmp	.+10     	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
 666:	20 e1       	ldi	r18, 0x10	; 16
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
 66c:	20 e1       	ldi	r18, 0x10	; 16
 66e:	32 e0       	ldi	r19, 0x02	; 2
 670:	f8 01       	movw	r30, r16
 672:	b7 fe       	sbrs	r11, 7
 674:	07 c0       	rjmp	.+14     	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
 676:	60 81       	ld	r22, Z
 678:	71 81       	ldd	r23, Z+1	; 0x01
 67a:	82 81       	ldd	r24, Z+2	; 0x02
 67c:	93 81       	ldd	r25, Z+3	; 0x03
 67e:	0c 5f       	subi	r16, 0xFC	; 252
 680:	1f 4f       	sbci	r17, 0xFF	; 255
 682:	06 c0       	rjmp	.+12     	; 0x690 <__EEPROM_REGION_LENGTH__+0x290>
 684:	60 81       	ld	r22, Z
 686:	71 81       	ldd	r23, Z+1	; 0x01
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 5f       	subi	r16, 0xFE	; 254
 68e:	1f 4f       	sbci	r17, 0xFF	; 255
 690:	a3 01       	movw	r20, r6
 692:	0e 94 2d 04 	call	0x85a	; 0x85a <__ultoa_invert>
 696:	88 2e       	mov	r8, r24
 698:	86 18       	sub	r8, r6
 69a:	fb 2d       	mov	r31, r11
 69c:	ff 77       	andi	r31, 0x7F	; 127
 69e:	3f 2e       	mov	r3, r31
 6a0:	36 fe       	sbrs	r3, 6
 6a2:	0d c0       	rjmp	.+26     	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
 6a4:	23 2d       	mov	r18, r3
 6a6:	2e 7f       	andi	r18, 0xFE	; 254
 6a8:	a2 2e       	mov	r10, r18
 6aa:	89 14       	cp	r8, r9
 6ac:	58 f4       	brcc	.+22     	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
 6ae:	34 fe       	sbrs	r3, 4
 6b0:	0b c0       	rjmp	.+22     	; 0x6c8 <__EEPROM_REGION_LENGTH__+0x2c8>
 6b2:	32 fc       	sbrc	r3, 2
 6b4:	09 c0       	rjmp	.+18     	; 0x6c8 <__EEPROM_REGION_LENGTH__+0x2c8>
 6b6:	83 2d       	mov	r24, r3
 6b8:	8e 7e       	andi	r24, 0xEE	; 238
 6ba:	a8 2e       	mov	r10, r24
 6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <__EEPROM_REGION_LENGTH__+0x2c8>
 6be:	b8 2c       	mov	r11, r8
 6c0:	a3 2c       	mov	r10, r3
 6c2:	03 c0       	rjmp	.+6      	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
 6c4:	b8 2c       	mov	r11, r8
 6c6:	01 c0       	rjmp	.+2      	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
 6c8:	b9 2c       	mov	r11, r9
 6ca:	a4 fe       	sbrs	r10, 4
 6cc:	0f c0       	rjmp	.+30     	; 0x6ec <__EEPROM_REGION_LENGTH__+0x2ec>
 6ce:	fe 01       	movw	r30, r28
 6d0:	e8 0d       	add	r30, r8
 6d2:	f1 1d       	adc	r31, r1
 6d4:	80 81       	ld	r24, Z
 6d6:	80 33       	cpi	r24, 0x30	; 48
 6d8:	21 f4       	brne	.+8      	; 0x6e2 <__EEPROM_REGION_LENGTH__+0x2e2>
 6da:	9a 2d       	mov	r25, r10
 6dc:	99 7e       	andi	r25, 0xE9	; 233
 6de:	a9 2e       	mov	r10, r25
 6e0:	09 c0       	rjmp	.+18     	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
 6e2:	a2 fe       	sbrs	r10, 2
 6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <__EEPROM_REGION_LENGTH__+0x2f2>
 6e6:	b3 94       	inc	r11
 6e8:	b3 94       	inc	r11
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
 6ec:	8a 2d       	mov	r24, r10
 6ee:	86 78       	andi	r24, 0x86	; 134
 6f0:	09 f0       	breq	.+2      	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
 6f2:	b3 94       	inc	r11
 6f4:	a3 fc       	sbrc	r10, 3
 6f6:	11 c0       	rjmp	.+34     	; 0x71a <__EEPROM_REGION_LENGTH__+0x31a>
 6f8:	a0 fe       	sbrs	r10, 0
 6fa:	06 c0       	rjmp	.+12     	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
 6fc:	b2 14       	cp	r11, r2
 6fe:	88 f4       	brcc	.+34     	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 700:	28 0c       	add	r2, r8
 702:	92 2c       	mov	r9, r2
 704:	9b 18       	sub	r9, r11
 706:	0e c0       	rjmp	.+28     	; 0x724 <__EEPROM_REGION_LENGTH__+0x324>
 708:	b2 14       	cp	r11, r2
 70a:	60 f4       	brcc	.+24     	; 0x724 <__EEPROM_REGION_LENGTH__+0x324>
 70c:	b6 01       	movw	r22, r12
 70e:	80 e2       	ldi	r24, 0x20	; 32
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <fputc>
 716:	b3 94       	inc	r11
 718:	f7 cf       	rjmp	.-18     	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
 71a:	b2 14       	cp	r11, r2
 71c:	18 f4       	brcc	.+6      	; 0x724 <__EEPROM_REGION_LENGTH__+0x324>
 71e:	2b 18       	sub	r2, r11
 720:	02 c0       	rjmp	.+4      	; 0x726 <__EEPROM_REGION_LENGTH__+0x326>
 722:	98 2c       	mov	r9, r8
 724:	21 2c       	mov	r2, r1
 726:	a4 fe       	sbrs	r10, 4
 728:	10 c0       	rjmp	.+32     	; 0x74a <__EEPROM_REGION_LENGTH__+0x34a>
 72a:	b6 01       	movw	r22, r12
 72c:	80 e3       	ldi	r24, 0x30	; 48
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <fputc>
 734:	a2 fe       	sbrs	r10, 2
 736:	17 c0       	rjmp	.+46     	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
 738:	a1 fc       	sbrc	r10, 1
 73a:	03 c0       	rjmp	.+6      	; 0x742 <__EEPROM_REGION_LENGTH__+0x342>
 73c:	88 e7       	ldi	r24, 0x78	; 120
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	02 c0       	rjmp	.+4      	; 0x746 <__EEPROM_REGION_LENGTH__+0x346>
 742:	88 e5       	ldi	r24, 0x58	; 88
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	b6 01       	movw	r22, r12
 748:	0c c0       	rjmp	.+24     	; 0x762 <__EEPROM_REGION_LENGTH__+0x362>
 74a:	8a 2d       	mov	r24, r10
 74c:	86 78       	andi	r24, 0x86	; 134
 74e:	59 f0       	breq	.+22     	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
 750:	a1 fe       	sbrs	r10, 1
 752:	02 c0       	rjmp	.+4      	; 0x758 <__EEPROM_REGION_LENGTH__+0x358>
 754:	8b e2       	ldi	r24, 0x2B	; 43
 756:	01 c0       	rjmp	.+2      	; 0x75a <__EEPROM_REGION_LENGTH__+0x35a>
 758:	80 e2       	ldi	r24, 0x20	; 32
 75a:	a7 fc       	sbrc	r10, 7
 75c:	8d e2       	ldi	r24, 0x2D	; 45
 75e:	b6 01       	movw	r22, r12
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <fputc>
 766:	89 14       	cp	r8, r9
 768:	38 f4       	brcc	.+14     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
 76a:	b6 01       	movw	r22, r12
 76c:	80 e3       	ldi	r24, 0x30	; 48
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <fputc>
 774:	9a 94       	dec	r9
 776:	f7 cf       	rjmp	.-18     	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
 778:	8a 94       	dec	r8
 77a:	f3 01       	movw	r30, r6
 77c:	e8 0d       	add	r30, r8
 77e:	f1 1d       	adc	r31, r1
 780:	80 81       	ld	r24, Z
 782:	b6 01       	movw	r22, r12
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <fputc>
 78a:	81 10       	cpse	r8, r1
 78c:	f5 cf       	rjmp	.-22     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
 78e:	22 20       	and	r2, r2
 790:	09 f4       	brne	.+2      	; 0x794 <__EEPROM_REGION_LENGTH__+0x394>
 792:	42 ce       	rjmp	.-892    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 794:	b6 01       	movw	r22, r12
 796:	80 e2       	ldi	r24, 0x20	; 32
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <fputc>
 79e:	2a 94       	dec	r2
 7a0:	f6 cf       	rjmp	.-20     	; 0x78e <__EEPROM_REGION_LENGTH__+0x38e>
 7a2:	f6 01       	movw	r30, r12
 7a4:	86 81       	ldd	r24, Z+6	; 0x06
 7a6:	97 81       	ldd	r25, Z+7	; 0x07
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <__EEPROM_REGION_LENGTH__+0x3ae>
 7aa:	8f ef       	ldi	r24, 0xFF	; 255
 7ac:	9f ef       	ldi	r25, 0xFF	; 255
 7ae:	2b 96       	adiw	r28, 0x0b	; 11
 7b0:	e2 e1       	ldi	r30, 0x12	; 18
 7b2:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__epilogue_restores__>

000007b6 <strnlen_P>:
 7b6:	fc 01       	movw	r30, r24
 7b8:	05 90       	lpm	r0, Z+
 7ba:	61 50       	subi	r22, 0x01	; 1
 7bc:	70 40       	sbci	r23, 0x00	; 0
 7be:	01 10       	cpse	r0, r1
 7c0:	d8 f7       	brcc	.-10     	; 0x7b8 <strnlen_P+0x2>
 7c2:	80 95       	com	r24
 7c4:	90 95       	com	r25
 7c6:	8e 0f       	add	r24, r30
 7c8:	9f 1f       	adc	r25, r31
 7ca:	08 95       	ret

000007cc <strnlen>:
 7cc:	fc 01       	movw	r30, r24
 7ce:	61 50       	subi	r22, 0x01	; 1
 7d0:	70 40       	sbci	r23, 0x00	; 0
 7d2:	01 90       	ld	r0, Z+
 7d4:	01 10       	cpse	r0, r1
 7d6:	d8 f7       	brcc	.-10     	; 0x7ce <strnlen+0x2>
 7d8:	80 95       	com	r24
 7da:	90 95       	com	r25
 7dc:	8e 0f       	add	r24, r30
 7de:	9f 1f       	adc	r25, r31
 7e0:	08 95       	ret

000007e2 <fputc>:
 7e2:	0f 93       	push	r16
 7e4:	1f 93       	push	r17
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
 7ea:	fb 01       	movw	r30, r22
 7ec:	23 81       	ldd	r18, Z+3	; 0x03
 7ee:	21 fd       	sbrc	r18, 1
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <fputc+0x16>
 7f2:	8f ef       	ldi	r24, 0xFF	; 255
 7f4:	9f ef       	ldi	r25, 0xFF	; 255
 7f6:	2c c0       	rjmp	.+88     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 7f8:	22 ff       	sbrs	r18, 2
 7fa:	16 c0       	rjmp	.+44     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 7fc:	46 81       	ldd	r20, Z+6	; 0x06
 7fe:	57 81       	ldd	r21, Z+7	; 0x07
 800:	24 81       	ldd	r18, Z+4	; 0x04
 802:	35 81       	ldd	r19, Z+5	; 0x05
 804:	42 17       	cp	r20, r18
 806:	53 07       	cpc	r21, r19
 808:	44 f4       	brge	.+16     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 80a:	a0 81       	ld	r26, Z
 80c:	b1 81       	ldd	r27, Z+1	; 0x01
 80e:	9d 01       	movw	r18, r26
 810:	2f 5f       	subi	r18, 0xFF	; 255
 812:	3f 4f       	sbci	r19, 0xFF	; 255
 814:	31 83       	std	Z+1, r19	; 0x01
 816:	20 83       	st	Z, r18
 818:	8c 93       	st	X, r24
 81a:	26 81       	ldd	r18, Z+6	; 0x06
 81c:	37 81       	ldd	r19, Z+7	; 0x07
 81e:	2f 5f       	subi	r18, 0xFF	; 255
 820:	3f 4f       	sbci	r19, 0xFF	; 255
 822:	37 83       	std	Z+7, r19	; 0x07
 824:	26 83       	std	Z+6, r18	; 0x06
 826:	14 c0       	rjmp	.+40     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 828:	8b 01       	movw	r16, r22
 82a:	ec 01       	movw	r28, r24
 82c:	fb 01       	movw	r30, r22
 82e:	00 84       	ldd	r0, Z+8	; 0x08
 830:	f1 85       	ldd	r31, Z+9	; 0x09
 832:	e0 2d       	mov	r30, r0
 834:	09 95       	icall
 836:	89 2b       	or	r24, r25
 838:	e1 f6       	brne	.-72     	; 0x7f2 <fputc+0x10>
 83a:	d8 01       	movw	r26, r16
 83c:	16 96       	adiw	r26, 0x06	; 6
 83e:	8d 91       	ld	r24, X+
 840:	9c 91       	ld	r25, X
 842:	17 97       	sbiw	r26, 0x07	; 7
 844:	01 96       	adiw	r24, 0x01	; 1
 846:	17 96       	adiw	r26, 0x07	; 7
 848:	9c 93       	st	X, r25
 84a:	8e 93       	st	-X, r24
 84c:	16 97       	sbiw	r26, 0x06	; 6
 84e:	ce 01       	movw	r24, r28
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	1f 91       	pop	r17
 856:	0f 91       	pop	r16
 858:	08 95       	ret

0000085a <__ultoa_invert>:
 85a:	fa 01       	movw	r30, r20
 85c:	aa 27       	eor	r26, r26
 85e:	28 30       	cpi	r18, 0x08	; 8
 860:	51 f1       	breq	.+84     	; 0x8b6 <__ultoa_invert+0x5c>
 862:	20 31       	cpi	r18, 0x10	; 16
 864:	81 f1       	breq	.+96     	; 0x8c6 <__ultoa_invert+0x6c>
 866:	e8 94       	clt
 868:	6f 93       	push	r22
 86a:	6e 7f       	andi	r22, 0xFE	; 254
 86c:	6e 5f       	subi	r22, 0xFE	; 254
 86e:	7f 4f       	sbci	r23, 0xFF	; 255
 870:	8f 4f       	sbci	r24, 0xFF	; 255
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	af 4f       	sbci	r26, 0xFF	; 255
 876:	b1 e0       	ldi	r27, 0x01	; 1
 878:	3e d0       	rcall	.+124    	; 0x8f6 <__ultoa_invert+0x9c>
 87a:	b4 e0       	ldi	r27, 0x04	; 4
 87c:	3c d0       	rcall	.+120    	; 0x8f6 <__ultoa_invert+0x9c>
 87e:	67 0f       	add	r22, r23
 880:	78 1f       	adc	r23, r24
 882:	89 1f       	adc	r24, r25
 884:	9a 1f       	adc	r25, r26
 886:	a1 1d       	adc	r26, r1
 888:	68 0f       	add	r22, r24
 88a:	79 1f       	adc	r23, r25
 88c:	8a 1f       	adc	r24, r26
 88e:	91 1d       	adc	r25, r1
 890:	a1 1d       	adc	r26, r1
 892:	6a 0f       	add	r22, r26
 894:	71 1d       	adc	r23, r1
 896:	81 1d       	adc	r24, r1
 898:	91 1d       	adc	r25, r1
 89a:	a1 1d       	adc	r26, r1
 89c:	20 d0       	rcall	.+64     	; 0x8de <__ultoa_invert+0x84>
 89e:	09 f4       	brne	.+2      	; 0x8a2 <__ultoa_invert+0x48>
 8a0:	68 94       	set
 8a2:	3f 91       	pop	r19
 8a4:	2a e0       	ldi	r18, 0x0A	; 10
 8a6:	26 9f       	mul	r18, r22
 8a8:	11 24       	eor	r1, r1
 8aa:	30 19       	sub	r19, r0
 8ac:	30 5d       	subi	r19, 0xD0	; 208
 8ae:	31 93       	st	Z+, r19
 8b0:	de f6       	brtc	.-74     	; 0x868 <__ultoa_invert+0xe>
 8b2:	cf 01       	movw	r24, r30
 8b4:	08 95       	ret
 8b6:	46 2f       	mov	r20, r22
 8b8:	47 70       	andi	r20, 0x07	; 7
 8ba:	40 5d       	subi	r20, 0xD0	; 208
 8bc:	41 93       	st	Z+, r20
 8be:	b3 e0       	ldi	r27, 0x03	; 3
 8c0:	0f d0       	rcall	.+30     	; 0x8e0 <__ultoa_invert+0x86>
 8c2:	c9 f7       	brne	.-14     	; 0x8b6 <__ultoa_invert+0x5c>
 8c4:	f6 cf       	rjmp	.-20     	; 0x8b2 <__ultoa_invert+0x58>
 8c6:	46 2f       	mov	r20, r22
 8c8:	4f 70       	andi	r20, 0x0F	; 15
 8ca:	40 5d       	subi	r20, 0xD0	; 208
 8cc:	4a 33       	cpi	r20, 0x3A	; 58
 8ce:	18 f0       	brcs	.+6      	; 0x8d6 <__ultoa_invert+0x7c>
 8d0:	49 5d       	subi	r20, 0xD9	; 217
 8d2:	31 fd       	sbrc	r19, 1
 8d4:	40 52       	subi	r20, 0x20	; 32
 8d6:	41 93       	st	Z+, r20
 8d8:	02 d0       	rcall	.+4      	; 0x8de <__ultoa_invert+0x84>
 8da:	a9 f7       	brne	.-22     	; 0x8c6 <__ultoa_invert+0x6c>
 8dc:	ea cf       	rjmp	.-44     	; 0x8b2 <__ultoa_invert+0x58>
 8de:	b4 e0       	ldi	r27, 0x04	; 4
 8e0:	a6 95       	lsr	r26
 8e2:	97 95       	ror	r25
 8e4:	87 95       	ror	r24
 8e6:	77 95       	ror	r23
 8e8:	67 95       	ror	r22
 8ea:	ba 95       	dec	r27
 8ec:	c9 f7       	brne	.-14     	; 0x8e0 <__ultoa_invert+0x86>
 8ee:	00 97       	sbiw	r24, 0x00	; 0
 8f0:	61 05       	cpc	r22, r1
 8f2:	71 05       	cpc	r23, r1
 8f4:	08 95       	ret
 8f6:	9b 01       	movw	r18, r22
 8f8:	ac 01       	movw	r20, r24
 8fa:	0a 2e       	mov	r0, r26
 8fc:	06 94       	lsr	r0
 8fe:	57 95       	ror	r21
 900:	47 95       	ror	r20
 902:	37 95       	ror	r19
 904:	27 95       	ror	r18
 906:	ba 95       	dec	r27
 908:	c9 f7       	brne	.-14     	; 0x8fc <__ultoa_invert+0xa2>
 90a:	62 0f       	add	r22, r18
 90c:	73 1f       	adc	r23, r19
 90e:	84 1f       	adc	r24, r20
 910:	95 1f       	adc	r25, r21
 912:	a0 1d       	adc	r26, r0
 914:	08 95       	ret

00000916 <__prologue_saves__>:
 916:	2f 92       	push	r2
 918:	3f 92       	push	r3
 91a:	4f 92       	push	r4
 91c:	5f 92       	push	r5
 91e:	6f 92       	push	r6
 920:	7f 92       	push	r7
 922:	8f 92       	push	r8
 924:	9f 92       	push	r9
 926:	af 92       	push	r10
 928:	bf 92       	push	r11
 92a:	cf 92       	push	r12
 92c:	df 92       	push	r13
 92e:	ef 92       	push	r14
 930:	ff 92       	push	r15
 932:	0f 93       	push	r16
 934:	1f 93       	push	r17
 936:	cf 93       	push	r28
 938:	df 93       	push	r29
 93a:	cd b7       	in	r28, 0x3d	; 61
 93c:	de b7       	in	r29, 0x3e	; 62
 93e:	ca 1b       	sub	r28, r26
 940:	db 0b       	sbc	r29, r27
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	f8 94       	cli
 946:	de bf       	out	0x3e, r29	; 62
 948:	0f be       	out	0x3f, r0	; 63
 94a:	cd bf       	out	0x3d, r28	; 61
 94c:	09 94       	ijmp

0000094e <__epilogue_restores__>:
 94e:	2a 88       	ldd	r2, Y+18	; 0x12
 950:	39 88       	ldd	r3, Y+17	; 0x11
 952:	48 88       	ldd	r4, Y+16	; 0x10
 954:	5f 84       	ldd	r5, Y+15	; 0x0f
 956:	6e 84       	ldd	r6, Y+14	; 0x0e
 958:	7d 84       	ldd	r7, Y+13	; 0x0d
 95a:	8c 84       	ldd	r8, Y+12	; 0x0c
 95c:	9b 84       	ldd	r9, Y+11	; 0x0b
 95e:	aa 84       	ldd	r10, Y+10	; 0x0a
 960:	b9 84       	ldd	r11, Y+9	; 0x09
 962:	c8 84       	ldd	r12, Y+8	; 0x08
 964:	df 80       	ldd	r13, Y+7	; 0x07
 966:	ee 80       	ldd	r14, Y+6	; 0x06
 968:	fd 80       	ldd	r15, Y+5	; 0x05
 96a:	0c 81       	ldd	r16, Y+4	; 0x04
 96c:	1b 81       	ldd	r17, Y+3	; 0x03
 96e:	aa 81       	ldd	r26, Y+2	; 0x02
 970:	b9 81       	ldd	r27, Y+1	; 0x01
 972:	ce 0f       	add	r28, r30
 974:	d1 1d       	adc	r29, r1
 976:	0f b6       	in	r0, 0x3f	; 63
 978:	f8 94       	cli
 97a:	de bf       	out	0x3e, r29	; 62
 97c:	0f be       	out	0x3f, r0	; 63
 97e:	cd bf       	out	0x3d, r28	; 61
 980:	ed 01       	movw	r28, r26
 982:	08 95       	ret

00000984 <_exit>:
 984:	f8 94       	cli

00000986 <__stop_program>:
 986:	ff cf       	rjmp	.-2      	; 0x986 <__stop_program>
